"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[3316],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(b,l(l({ref:n},c),{},{components:t})):r.createElement(b,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8e3:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const i={id:"selenoid",title:"selenoid",sidebar_position:1},l="Introduction",a={unversionedId:"cloud/selenoid",id:"cloud/selenoid",isDocsHomePage:!1,title:"selenoid",description:"Selenoid Selenoid is a powerful Golang implementation of original Selenium hub code. It is using Docker to launch browsers. Please refer to GitHub repository if you need source code.",source:"@site/docs/cloud/selenoid.md",sourceDirName:"cloud",slug:"/cloud/selenoid",permalink:"/docs/cloud/selenoid",editUrl:"https://github.com/serenity-bdd/serenity-bdd.github.io/blob/master/docs/cloud/selenoid.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"selenoid",title:"selenoid",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Selenium Grid",permalink:"/docs/cloud/selenium-grid"},next:{title:"LambdaTest",permalink:"/docs/cloud/lambdatest"}},s=[],u={toc:s};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://aerokube.com/selenoid/latest/"},"Selenoid")," Selenoid is a powerful Golang implementation of original Selenium hub code. It is using Docker to launch browsers. Please refer to GitHub repository if you need source code."),(0,o.kt)("p",null,"The simplest way to configure the driver you want to use is in your project's ",(0,o.kt)("inlineCode",{parentName:"p"},"serenity.conf")," file (which you will find in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/test/resources")," folder).\nRefer to ",(0,o.kt)("a",{parentName:"p",href:"https://serenity-bdd.github.io/docs/guide/driver_config"},"Driver Config")),(0,o.kt)("p",null,"You can configure your tests to run against this server by setting two properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set the ",(0,o.kt)("inlineCode",{parentName:"li"},"webdriver.driver")," property to ",(0,o.kt)("inlineCode",{parentName:"li"},"remote")," "),(0,o.kt)("li",{parentName:"ul"},"Set the ",(0,o.kt)("inlineCode",{parentName:"li"},"webdriver.remote.url")," property to the address of your selenoid instance (http://localhost:4444/wd/hub by default)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},'webdriver {\n  driver = remote\n  remote.url = "http://localhost:4444/wd/hub"\n  }\n }\n')),(0,o.kt)("p",null,"You can also provide additional properties about the target browser or environment, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"browserName"),':  property to the name of the driver you want to run (e.g. "chrome")'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"browserVersion"),': What version of the remote browser to use (e.g. "93")')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},'\nwebdriver {\n  driver = remote\n  remote.url = "http://localhost:4444/wd/hub"\n  capabilities {\n    browserName = "chrome"\n    browserVersion = "93"\n  }\n}\n\n')),(0,o.kt)("p",null,"If you use serenity.properties:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"\nwebdriver.driver = remote\nwebdriver.remote.url = http://localhost:4444/wd/hub\nwebdriver.capabilities.browserVersion=93.0\nwebdriver.capabilities.browserName=chrome\n\n")),(0,o.kt)("p",null,"Example with multiple environments for Selenoid and Local browser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},'serenity {\n  project.name = "Project with Remote(selenoid) and Local browsers"\n  console.colors = true\n  logging = VERBOSE\n  take.screenshots = AFTER_EACH_STEP\n}\n\nenvironment = selenoid\n\nenvironments {\n  selenoid {\n    webdriver {\n      driver = remote\n      remote.url = "http://localhost:4444/wd/hub"\n      capabilities {\n        browserName = "chrome"\n        browserVersion = "118.0"\n        "selenoid:options" {\n            enableVNC = true\n            enableVideo = false\n            sessionTimeout = 10m\n            timeZone = America/Los_Angeles\n          }\n        "goog:chromeOptions" {\n            args = ["--remote-allow-origins=*", "disable-gpu", "disable-setuid-sandbox", "disable-dev-shm-usage"]\n            prefs {\n              profile.profile_default_content_settings.popups = 0\n              profile.default_content_setting_values.notifications = 1\n             }\n          }\n        timeouts {\n           #script = 30000\n           #pageLoad = 300000\n           implicit = 5000\n         }\n      }\n    }\n  }\n  local {\n    webdriver {\n      driver = chrome\n      capabilities {\n        "goog:chromeOptions" {\n            args = ["--remote-allow-origins=*", "disable-gpu", "disable-setuid-sandbox", "disable-dev-shm-usage"]\n            prefs {\n              profile.profile_default_content_settings.popups = 0\n              profile.default_content_setting_values.notifications = 1\n             }\n          }\n        timeouts {\n           #script = 30000\n           #pageLoad = 300000\n           implicit = 5000\n         }\n      }\n    }\n  }\n}\n\n')),(0,o.kt)("p",null,"You can run tests on specific environment via comman line.\n",(0,o.kt)("inlineCode",{parentName:"p"},"mvn clean verify -Denvironment=selenoid")))}c.isMDXComponent=!0}}]);